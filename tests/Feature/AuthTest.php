<?php

namespace Tests\Feature;

use App\Models\Comment;
use App\Models\Post;
use App\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class AuthTest extends TestCase
{
    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }
    /**
     * A basic feature test example.
     *
     * @return void
     */
    public function testRegistration()
    {
        /*$user = User::where('email', 'unit@unit')->first();
        empty($user) ?: $user->delete();*/
        $data = [
            'name' => 'unit',
            'email' => 'unit@unit',
            'password' => 'unit',
        ];
        $this->json('POST', 'api/registration', $data)
            ->assertStatus(201);
    }

    public function testLogin()
    {
        $data = [
            'email' => 'unit@unit',
            'password' => 'unit',
        ];
        $this->json('POST', 'api/login', $data)
            ->assertStatus(200);
    }

    public function testPostCreate()
    {
        $credentials = [
            'email' => 'unit@unit',
            'password' => 'unit',
        ];
        $token = auth()->attempt($credentials);
        $headers = ['Authorization' => 'Bearer ' . $token];
        $this->json('POST', 'api/post/create', [
            'title' => 'unitTitleEdit',
            'content' => 'unitContentEdit'
        ], $headers)
            ->assertStatus(201);
    }

    public function testPostEdit()
    {
        $credentials = [
            'email' => 'unit@unit',
            'password' => 'unit',
        ];
        $token = auth()->attempt($credentials);
        $post = Post::where('email', 'unit@unit')->first();
        $headers = ['Authorization' => 'Bearer ' . $token];
        $this->json('PUT', 'api/post/edit/' . $post->id, [
            'title' => 'unitTitleEdit',
            'content' => 'unitContentEdit'
        ], $headers)
            ->assertStatus(200);
    }

    public function testCommentCreate()
    {
        $credentials = [
            'email' => 'unit@unit',
            'password' => 'unit',
        ];
        $token = auth()->attempt($credentials);
        $post = Post::find(1);
        $headers = ['Authorization' => 'Bearer ' . $token];
        $this->json('POST', 'api/post/' . $post->id . '/comment', [
            'comment' => 'unitComment',
        ], $headers)
            ->assertStatus(201);
    }

    public function testPostDelete()
    {
        $credentials = [
            'email' => 'unit@unit',
            'password' => 'unit',
        ];
        $token = auth()->attempt($credentials);
        $post = Post::where('email', 'unit@unit')->first();
        $headers = ['Authorization' => 'Bearer ' . $token];
        $this->json('DELETE', 'api/post/' . $post->id, [], $headers)
            ->assertStatus(204);
    }
}
